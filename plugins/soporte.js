const { default: makeWASocket, useSingleFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys'); const { Boom } = require('@hapi/boom'); const { existsSync } = require('fs'); // Cargar estado de sesión const { state, saveState } = useSingleFileAuthState('./auth_info.json'); // Crear cliente async function startBot() { const sock = makeWASocket({ auth: state, printQRInTerminal: true, }); sock.ev.on('creds.update', saveState); sock.ev.on('connection.update', (update) => { const { connection, lastDisconnect } = update; if (connection === 'close') { const shouldReconnect = (lastDisconnect.error = Boom)?.output?.statusCode !== DisconnectReason.loggedOut; console.log('Conexión cerrada. Reconectando:', shouldReconnect); if (shouldReconnect) { startBot(); } } else if (connection === 'open') { console.log('✅ Bot conectado a WhatsApp'); } }); sock.ev.on('messages.upsert', async ({ messages }) => { const msg = messages[0]; if (!msg.message || msg.key.fromMe) return; const text = msg.message.conversation || msg.message.extendedTextMessage?.text || ''; if (!text.startsWith('.soporte')) return; const args = text.trim().split(' '); const numeroSoporte = args[1]; if (!numeroSoporte || isNaN(numeroSoporte)) { await sock.sendMessage(msg.key.remoteJid, { text: '❌ Usa el formato correcto: `.soporte 12345`', }); return; } // Número de soporte (formato internacional, sin "+") const soporte = '51987654321'; // REEMPLAZA con tu número real // Enviar mensaje al número de soporte await sock.sendMessage(`${soporte}@s.whatsapp.net`, { text: `📞 Solicitud de soporte para el número: *${numeroSoporte}*\n👤 Solicitado por: ${msg.key.remoteJid}`, }); // Confirmar al usuario await sock.sendMessage(msg.key.remoteJid, { text: '✅ Tu número fue enviado al soporte correctamente.', }); }); } startBot(); 
